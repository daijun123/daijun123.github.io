{"meta":{"title":"博客","subtitle":"Angus Dai个人博客","description":"Angus Dai个人博客，主要总结平时工作时遇到的技术难点和学习到知识，还有一些生活杂事","author":"Angus Dai","url":"http://118.25.36.250:8000"},"pages":[{"title":"","date":"2018-09-12T03:21:48.251Z","updated":"2018-09-10T06:46:26.000Z","comments":true,"path":"about/index.html","permalink":"http://118.25.36.250:8000/about/index.html","excerpt":"","text":"我叫代菌，英文名angus.dai，毕业于汉江师范学院"},{"title":"categories","date":"2018-09-10T09:33:42.000Z","updated":"2018-09-11T03:25:48.000Z","comments":false,"path":"categories/index.html","permalink":"http://118.25.36.250:8000/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-10T06:38:08.000Z","updated":"2018-09-11T03:22:00.000Z","comments":true,"path":"tags/index.html","permalink":"http://118.25.36.250:8000/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"vue生命周期案例","slug":"vue-life-cycle-demo","date":"2019-09-05T08:24:21.000Z","updated":"2019-09-05T08:26:01.619Z","comments":true,"path":"2019/09/05/vue-life-cycle-demo/","link":"","permalink":"http://118.25.36.250:8000/2019/09/05/vue-life-cycle-demo/","excerpt":"","text":"父组件123456789101112131415161718192021&lt;template&gt; &lt;div&gt; &lt;button @click=&quot;showClose = !showClose&quot;&gt;&#123;&#123; showClose ? &apos;加载时钟&apos; : &apos;销毁时钟&apos; &#125;&#125;&lt;/button&gt; &lt;Clock v-if=&quot;!showClose&quot;&gt;&lt;/Clock&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Clock from &quot;@/components/Clock.vue&quot;;export default &#123; data() &#123; return &#123; showClose: false &#125;; &#125;, components: &#123; Clock &#125;&#125;;&lt;/script&gt; 子组件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;template&gt; &lt;div&gt; &#123;&#123; log(&quot;render&quot;) &#125;&#125; &#123;&#123; now &#125;&#125; &lt;button @click=&quot;start = !start&quot;&gt;&#123;&#123; start ? &quot;停止&quot; : &quot;开始&quot; &#125;&#125;&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import moment from &quot;moment&quot;;export default &#123; data: function() &#123; console.log(&quot;data&quot;); // this.moment = moment; this.log = window.console.log; return &#123; now: moment(new Date()).format(&quot;YYYY-MM-DD HH:mm:ss&quot;), start: false &#125;; &#125;, watch: &#123; start() &#123; this.startClock(); &#125; &#125;, beforeCreate() &#123; console.log(&quot;beforeCreate&quot;); &#125;, created() &#123; console.log(&quot;created&quot;); &#125;, beforeMount() &#123; console.log(&quot;beforeMount&quot;); &#125;, mounted() &#123; console.log(&quot;mounted&quot;); this.startClock(); &#125;, beforeUpdate() &#123; console.log(&quot;beforeUpdate&quot;); &#125;, updated() &#123; console.log(&quot;updated&quot;); &#125;, beforeDestroy() &#123; console.log(&quot;beforeDestroy&quot;); clearInterval(this.clockInterval); &#125;, destroyed() &#123; console.log(&quot;destroyed&quot;); &#125;, methods: &#123; startClock() &#123; clearInterval(this.clockInterval); if (this.start) &#123; this.clockInterval = setInterval(() =&gt; &#123; this.now = moment(new Date()).format(&quot;YYYY-MM-DD HH:mm:ss&quot;); &#125;, 1000); &#125; &#125; &#125;&#125;;&lt;/script&gt;","categories":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"}]},{"title":"vue生命周期","slug":"vue-life-cycle","date":"2019-09-05T08:11:41.000Z","updated":"2019-09-05T08:23:44.832Z","comments":true,"path":"2019/09/05/vue-life-cycle/","link":"","permalink":"http://118.25.36.250:8000/2019/09/05/vue-life-cycle/","excerpt":"","text":"创建阶段12345beforeCreatecreatedbeforeMountrendermounted 更新阶段123beforeUpdaterenderupdated 销毁阶段12beforeDestorydestroyed","categories":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"}]},{"title":"计算属性VS侦听器","slug":"computed-vs-watch","date":"2019-09-05T08:04:52.000Z","updated":"2019-09-05T08:08:01.160Z","comments":true,"path":"2019/09/05/computed-vs-watch/","link":"","permalink":"http://118.25.36.250:8000/2019/09/05/computed-vs-watch/","excerpt":"","text":"计算属性: 响应式的改变一个或多个元素的值，去修改一个元素的值 侦听器: 响应式的改变一个元素的值，去修改多个元素的值 123456789&lt;div&gt; &lt;input v-model=&quot;firstName&quot; /&gt; &lt;br /&gt; &lt;input v-model=&quot;lastName&quot; /&gt; &lt;h3&gt;计算属性&lt;/h3&gt; &lt;div&gt;&#123;&#123; name1 &#125;&#125;&lt;/div&gt; &lt;h3&gt;侦听器&lt;/h3&gt; &lt;div&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617181920212223export default &#123; name: &quot;bCom&quot;, data() &#123; return &#123; firstName: &quot;dai&quot;, lastName: &quot;jun&quot;, fullName: &quot;&quot; &#125;; &#125;, computed: &#123; name1() &#123; return this.firstName + &quot;&quot; + this.lastName; &#125; &#125;, watch: &#123; firstName(val) &#123; this.fullName = val + &quot;&quot; + this.lastName; &#125;, lastName(val) &#123; this.fullName = this.firstName + &quot;&quot; + val; &#125; &#125;&#125;;","categories":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"}]},{"title":"侦听器","slug":"watch","date":"2019-09-05T07:55:40.000Z","updated":"2019-09-05T08:04:14.425Z","comments":true,"path":"2019/09/05/watch/","link":"","permalink":"http://118.25.36.250:8000/2019/09/05/watch/","excerpt":"","text":"实时监控，当监控的数据发生改变时触发 响应式的改变一个元素的值，去修改多个元素的值123&lt;div&gt; &lt;input v-model=&quot;a&quot; /&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233export default &#123; name: &quot;bCom&quot;, data() &#123; return &#123; a: 1, b: &#123; c: 2 &#125;, d: &#123; e: 3 &#125; &#125;; &#125;, watch: &#123; a(val, oldVal) &#123; console.log(&quot;val: &quot;, val, &quot;oldVal: &quot;, oldVal); this.b.c += 1; this.d.e += 1; &#125;, b: &#123; handler(val, oldVal) &#123; console.log(&quot;b触发了 &quot;,&apos;val: &apos;,val,&apos;oldVal: &apos;,oldVal); &#125; &#125;, d: &#123; handler(val,oldVal) &#123; console.log(&quot;d触发了 &quot;,&apos;val: &apos;,val,&apos;oldVal: &apos;,oldVal); &#125;, // 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深，默认为false deep: true &#125; &#125;&#125;;","categories":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"}]},{"title":"计算属性VS方法","slug":"computed-vs-method","date":"2019-09-05T07:52:30.000Z","updated":"2019-09-05T07:55:02.063Z","comments":true,"path":"2019/09/05/computed-vs-method/","link":"","permalink":"http://118.25.36.250:8000/2019/09/05/computed-vs-method/","excerpt":"","text":"计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值。 而每当触发重新渲染时，调用方法将总会再次执行函数。1234&lt;div&gt;计算属性方式：&#123;&#123; reveres1 &#125;&#125;&lt;/div&gt;&lt;div&gt;方法方式：&#123;&#123; reveresMethod2() &#125;&#125;&lt;/div&gt;&lt;button @click=&quot;() =&gt; $forceUpdate()&quot;&gt;改变&lt;/button&gt;&lt;input v-model=&quot;message&quot;&gt;&lt;/div&gt; 1234567891011121314151617181920export default &#123; name: &quot;aCom&quot;, data() &#123; return &#123; message: &apos;Hello World&apos; &#125; &#125;, computed: &#123; reveres1() &#123; console.log(&apos;执行了reveres1&apos;); return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;); &#125; &#125;, methods: &#123; reveresMethod2() &#123; console.log(&apos;执行了reveresMethod2&apos;); return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;); &#125; &#125;&#125;;","categories":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"}]},{"title":"vue-prop","slug":"vue-prop","date":"2019-04-23T06:35:03.000Z","updated":"2019-04-23T06:35:34.625Z","comments":true,"path":"2019/04/23/vue-prop/","link":"","permalink":"http://118.25.36.250:8000/2019/04/23/vue-prop/","excerpt":"","text":"学习vue有一段时间了，也写了一些东西。今天看文档突然看到了一个好玩的东西，那就是prop。prop的作用是父组件中引用了子组件并给子组件加了一个属性，这个属性可以是静态的，可以是动态的，可以是数字，可以是字符串，可以是数组，还可以是对象。接下来就展示改怎么用。 传静态的属性子组件：1234567891011&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&quot;msg&quot;]&#125;&lt;/script&gt; 父组件：123456789101112131415&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld msg=&quot;hello&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;&#125;;&lt;/script&gt; 好了，这样就完成了一个最简单的使用prop接收父元素的值 传动态字符串子组件1234567891011&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&quot;msg&quot;]&#125;&lt;/script&gt; 父组件1234567891011121314151617181920&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld :msg=&quot;hello&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;, data() &#123; return &#123; hello: &quot;hello world&quot; &#125; &#125;&#125;;&lt;/script&gt; 可以看到，子组件我未做任何修改，只是在父组件做了一些修改 传动态数组子组件123456789101112131415&lt;template&gt; &lt;div&gt; &lt;ul&gt; &lt;li v-for=&quot;item in msg&quot; :key=&quot;item&quot;&gt; &#123;&#123; item &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&quot;msg&quot;]&#125;&lt;/script&gt; 父组件1234567891011121314151617181920&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld :msg=&quot;hello&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;, data() &#123; return &#123; hello: [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;] &#125; &#125;&#125;;&lt;/script&gt; 传动态对象子组件123456789101112&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123; msg.id &#125;&#125;&lt;/h1&gt; &lt;h2&gt;&#123;&#123; msg.name &#125;&#125;&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&quot;msg&quot;]&#125;&lt;/script&gt; 父组件1234567891011121314151617181920212223&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld :msg=&quot;hello&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;, data() &#123; return &#123; hello: &#123; id: 1, name: &quot;hello dj&quot; &#125; &#125; &#125;&#125;;&lt;/script&gt; 对prop的状态进行验证prop的状态可以为 String Number Boolean Array Object Date Function Symbol下面进行演示子组件1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123; num &#125;&#125;&lt;/h1&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;h1&gt;&#123;&#123; obj.id &#125;&#125;&lt;/h1&gt; &lt;h2&gt;&#123;&#123; obj.name &#125;&#125;&lt;/h2&gt; &lt;ul&gt; &lt;li v-for=&quot;item in arrs&quot; :key=&quot;item&quot;&gt; &#123;&#123; item &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123; num: &#123; type: Number &#125;, msg: &#123; type: String &#125;, arrs: &#123; type: Array &#125;, obj: &#123; type: Object &#125; &#125;&#125;&lt;/script&gt; 父组件1234567891011121314151617181920212223242526&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld :num=&quot;num&quot; :msg=&quot;hello&quot; :arrs=&quot;arr&quot; :obj=&quot;post&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;, data() &#123; return &#123; num: 10, hello: &quot;hello world&quot;, arr: [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;], post: &#123; id: 1, name: &quot;hello dj&quot; &#125; &#125; &#125;&#125;;&lt;/script&gt; 上面演示了Number,String,Array,object的用法","categories":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"}]},{"title":"vue中ref的作用","slug":"vue-ref","date":"2019-04-23T06:34:08.000Z","updated":"2019-04-23T06:34:43.241Z","comments":true,"path":"2019/04/23/vue-ref/","link":"","permalink":"http://118.25.36.250:8000/2019/04/23/vue-ref/","excerpt":"","text":"vue中的ref其实功能很强大，下面介绍一下如何使用。 基本用法，本页面获取dom元素12345678910111213141516&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;div ref=&quot;testDom&quot;&gt;11111&lt;/div&gt; &lt;button @click=&quot;getTest&quot;&gt;获取test节点&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; getTest() &#123; console.log(this.$refs.testDom) &#125; &#125;&#125;;&lt;/script&gt; 其实ref除了可以获取本页面的dom元素，还可以拿到子组件中的data和去调用子组件中的方法 获取子组件中的data子组件123456789101112131415&lt;template&gt; &lt;div&gt; &#123;&#123; msg &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; msg: &quot;hello world&quot; &#125; &#125;&#125;&lt;/script&gt; 父组件123456789101112131415161718192021222324&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld ref=&quot;hello&quot;/&gt; &lt;button @click=&quot;getHello&quot;&gt;获取helloworld组件中的值&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;, data() &#123; return &#123;&#125; &#125;, methods: &#123; getHello() &#123; console.log(this.$refs.hello.msg) &#125; &#125;&#125;;&lt;/script&gt; 调用子组件中的方法子组件1234567891011121314&lt;template&gt; &lt;div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; open() &#123; console.log(&quot;调用到了&quot;) &#125; &#125;&#125;&lt;/script&gt; 父组件123456789101112131415161718192021222324&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld ref=&quot;hello&quot;/&gt; &lt;button @click=&quot;getHello&quot;&gt;获取helloworld组件中的值&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;, data() &#123; return &#123;&#125; &#125;, methods: &#123; getHello() &#123; this.$refs.hello.open(); &#125; &#125;&#125;;&lt;/script&gt; 子组件调用父组件方法子组件12345678910111213141516&lt;template&gt; &lt;div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; open() &#123; console.log(&quot;调用了&quot;); // 调用父组件方法 this.$emit(&quot;refreshData&quot;); &#125; &#125;&#125;&lt;/script&gt; 父组件123456789101112131415161718192021222324252627&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;HelloWorld ref=&quot;hello&quot; @refreshData=&quot;getData&quot;/&gt; &lt;button @click=&quot;getHello&quot;&gt;获取helloworld组件中的值&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &quot;./components/HelloWorld.vue&quot;;export default &#123; components: &#123; HelloWorld &#125;, data() &#123; return &#123;&#125; &#125;, methods: &#123; getHello() &#123; this.$refs.hello.open() &#125;, getData() &#123; console.log(&apos;111111&apos;) &#125; &#125;&#125;;&lt;/script&gt;","categories":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"}]},{"title":"javascript常用的数组操作","slug":"js-list","date":"2019-04-23T06:30:01.000Z","updated":"2019-04-23T06:31:52.427Z","comments":true,"path":"2019/04/23/js-list/","link":"","permalink":"http://118.25.36.250:8000/2019/04/23/js-list/","excerpt":"","text":"1234567891011121314151617181920212223let array = [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;];let arr = [1,2,3,4,5,6,7,8];// 获取数组长度console.log(array.length);// 通过下标读取，从0开始console.log(&quot;数组第一个元素为：&quot; + array[0]);// 通过下标添加一个元素或者修改一个一个元素array[3] = &quot;dd&quot;;console.log(&quot;通过下标添加一个元素：&quot; + array);// 在数组前面加一个元素array.unshift(&quot;dd&quot;);// 删除数组第一个元素array.shift();// 通过push添加一个元素到数组末尾array.push(&quot;ee&quot;);// 删除数组最后一个元素array.pop();console.log(&quot;通过push添加元素：&quot; + array);// splice 删除指定位置的元素 下标从0开始 第一个参数是起始位置 第二个参数是长度 第三个参数是替换元素arr.splice(2, 3); // 根据一个字符将数组转成字符串let str = array.join(&quot;-&quot;);console.log(str);","categories":[{"name":"js","slug":"js","permalink":"http://118.25.36.250:8000/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://118.25.36.250:8000/tags/js/"}]},{"title":"当文字过多时，超出部分显示省略号","slug":"font-ellipsis","date":"2018-09-27T14:49:23.000Z","updated":"2018-09-27T14:50:50.614Z","comments":true,"path":"2018/09/27/font-ellipsis/","link":"","permalink":"http://118.25.36.250:8000/2018/09/27/font-ellipsis/","excerpt":"","text":"12345 /* 文字省略 */width: 100%;overflow: hidden; /* 文字超出部分不显示 */text-overflow: ellipsis; /* 文字如果超出以省略号表示 */white-space: nowrap; /* 文字不换行 */","categories":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/categories/css3/"}],"tags":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/tags/css3/"}]},{"title":"js处理下载文件流","slug":"file-stream","date":"2018-09-27T14:43:14.000Z","updated":"2018-09-27T14:47:21.784Z","comments":true,"path":"2018/09/27/file-stream/","link":"","permalink":"http://118.25.36.250:8000/2018/09/27/file-stream/","excerpt":"","text":"今天在处理excel下载时，后端给我传了一个文件流，发现使用ajax处理不了，后来在网上查阅资料终于给解决了。 1234567891011121314151617181920212223242526272829// 获取时间戳let timestamp=new Date().getTime();// 获取XMLHttpRequestlet xmlResquest = new XMLHttpRequest();// 发起请求xmlResquest.open(&quot;POST&quot;, ImgUrlPrefix + &quot;/api/export_man_hour&quot;, true);// 设置请求头类型xmlResquest.setRequestHeader(&quot;Content-type&quot;, &quot;application/json&quot;);// 设置请求tokenxmlResquest.setRequestHeader(&quot;Authorization&quot;,Vue.cookie.get(&apos;token&apos;));xmlResquest.responseType = &quot;blob&quot;;// 返回xmlResquest.onload = function(oEvent) &#123;let content = xmlResquest.response;// 组装a标签let elink = document.createElement(&quot;a&quot;);// 设置下载文件名elink.download = timestamp + &quot;.xlsx&quot;;elink.style.display = &quot;none&quot;;let blob = new Blob([content]);elink.href = URL.createObjectURL(blob);document.body.appendChild(elink);elink.click();document.body.removeChild(elink);&#125;;xmlResquest.send();","categories":[{"name":"javascript","slug":"javascript","permalink":"http://118.25.36.250:8000/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://118.25.36.250:8000/tags/javascript/"}]},{"title":"position属性","slug":"position","date":"2018-09-27T08:19:10.000Z","updated":"2018-09-27T08:25:54.726Z","comments":true,"path":"2018/09/27/position/","link":"","permalink":"http://118.25.36.250:8000/2018/09/27/position/","excerpt":"","text":"static默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。 relative(常用)生成相对定位的元素，相对于其正常位置进行定位。 因此，&quot;left:20&quot; 会向元素的 LEFT 位置添加 20 像素。 absolute(常用)生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。 元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。 fixed生成绝对定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。 移动端自适应问题让父级元素relative（相对定位），子级元素absolute（绝对定位）","categories":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/categories/css3/"}],"tags":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/tags/css3/"}]},{"title":"css组合选择器","slug":"css-combiner-selector","date":"2018-09-27T08:10:35.000Z","updated":"2018-09-27T08:26:21.687Z","comments":true,"path":"2018/09/27/css-combiner-selector/","link":"","permalink":"http://118.25.36.250:8000/2018/09/27/css-combiner-selector/","excerpt":"","text":"相邻兄弟选择器（+）12345相邻兄弟选择器 (+) 介于两个选择器之间，当第二个元素紧跟在第一个元素之后，并且两个元素都是属于同一个父元素的子元素，则第二个元素将被选中。div + span &#123; background-color: #ccc;&#125; 通用兄弟选择器（~）12345在使用 ~ 连接两个元素时,它会匹配第二个元素,条件是它必须跟(不一定是紧跟)在第一个元素之后,且他们都有一个共同的父元素 .div ~ span &#123; background-color: #ccc;&#125; 子选择器（&gt;）12345当使用 &gt; 选择符分隔两个元素时,它只会匹配那些作为第一个元素的直接后代(子元素)的第二元素. 与之相比, 当两个元素由 后代选择器 相连时, 它表示匹配存在的所有由第一个元素作为祖先元素(但不一定是父元素)的第二个元素, 无论它在 DOM 中&quot;跳跃&quot; 多少次.div &gt; span &#123; background-color: #ccc;&#125; 后代选择器（ 空格 ）12345当使用 ␣ 选择符 (这里代表一个空格,更确切的说是一个或多个的空白字符) 连接两个元素时使得该选择器可以只匹配那些由第一个元素作为祖先元素的所有第二个元素(后代元素) . 后代选择器与 子选择器 很相似, 但是后代选择器不需要相匹配元素之间要有严格的父子关系.div span &#123; background-color: #ccc;&#125;","categories":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/categories/css3/"}],"tags":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/tags/css3/"}]},{"title":"拼接array和拼接map","slug":"array-map","date":"2018-09-26T09:46:49.000Z","updated":"2018-09-26T09:58:35.455Z","comments":true,"path":"2018/09/26/array-map/","link":"","permalink":"http://118.25.36.250:8000/2018/09/26/array-map/","excerpt":"","text":"拼接array情况一：拼接普通array12var arr = [1,2,3,4,5]arr.push(6) 情况二： 拼接map类型的array1234567891011var arr1 = [ &#123; &quot;a&quot;: 1 &#125;, &#123; &quot;b&quot;: 2 &#125;]arr1.push(&#123; &quot;c&quot;: 3&#125;) 情况三： 拼接map累心的array，并且键非字符串的复杂类型，需要将键放在[]中括号中12345678910111213141516171819var arr2 = [ &#123; &quot;a&quot;: 1 &#125;, &#123; &quot;b&quot;: 2 &#125;]var arr3 = [ &#123; &quot;c&quot;: 3 &#125;, &#123; &quot;d&quot;: 4 &#125;]arr2.push(&#123; [arr3.c]: 3&#125;) 拼接map1234567var map = &#123; a: 1, b: 2&#125;;map.c = 3;map[c] = 3;","categories":[{"name":"javascript","slug":"javascript","permalink":"http://118.25.36.250:8000/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://118.25.36.250:8000/tags/javascript/"}]},{"title":"background和border的用法","slug":"background-border","date":"2018-09-11T13:18:41.000Z","updated":"2018-09-11T13:56:02.000Z","comments":true,"path":"2018/09/11/background-border/","link":"","permalink":"http://118.25.36.250:8000/2018/09/11/background-border/","excerpt":"","text":"今天总结一下background和border的用法 1、background一般用来设置背景，有两个很常用的属性：background-color（背景颜色）、background-image（背景图片）1234567891011121314.box &#123; // 背景颜色 background-color: #C0C0C0;&#125;.box11 &#123; // 径向背景颜色 background: linear-gradient(to bottom,#fff 0%, #ccc 100%);&#125;.box1 &#123; // 背景图片 background-image: url(./images/slide_01_2000x410.jpg);&#125; 2、border一般用来设置边框，有两个很常用的属性：border-radius（圆角）、border-image（边框图片）123456789101112131415161718192021222324252627.box2 &#123; // 实线边框 border: 1px solid #ccc;&#125;.box3 &#123; // 虚线边框 border: 1px dashed #ccc;&#125;.box4 &#123; // 圆角 border-radius: 5px;&#125;.box5 &#123; border: 1px solid #ccc; // border-image-source默认只填充到容器的四角 border-image-source: url(&quot;../image/border.png&quot;); // border-image-slice: 设置四个方向上的裁切距离， fill: 做内容内部的填充 border-image-slice: 27 fill; // 设置边框图片宽度,如果不设置那么将会使用默认边框宽度，这里是1px border-image-width: 27px; // border-image-repeat: no-repeat; &#125;","categories":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/categories/css3/"}],"tags":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/tags/css3/"}]},{"title":"vue element中如何在弹出框中获取dom元素来使用echarts","slug":"element-ui-dialog","date":"2018-09-10T14:03:39.000Z","updated":"2018-09-11T03:29:26.000Z","comments":true,"path":"2018/09/10/element-ui-dialog/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/element-ui-dialog/","excerpt":"","text":"1、在dialog中使用open方法2、在定时函数setTimeout中执行方法 12345678// dialog的open方法openChargeRate() &#123; const _self = this; setTimeout(() =&gt; &#123; // 执行echarts画图方法 _self.drawLine(); &#125;, 0);&#125;","categories":[{"name":"element-ui","slug":"element-ui","permalink":"http://118.25.36.250:8000/categories/element-ui/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"},{"name":"element-ui","slug":"element-ui","permalink":"http://118.25.36.250:8000/tags/element-ui/"},{"name":"echarts","slug":"echarts","permalink":"http://118.25.36.250:8000/tags/echarts/"}]},{"title":"element表单验证如何合理清除标记","slug":"element-ui-validation","date":"2018-09-10T14:02:05.000Z","updated":"2018-09-11T03:29:38.000Z","comments":true,"path":"2018/09/10/element-ui-validation/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/element-ui-validation/","excerpt":"","text":"最近使用element表单验证的时候出现了一些问题1、首先是我把清除表单验证放在了axios的try和catch中，导致第二次提交表单时表单验证不正确；2、其次呢，在做验证后台数据重复时，导致带有需要表单验证的数据项清空。 解决方案：123在dialog关闭时清除表单验证使用下面的代码this.$refs.ruleForm.resetFields();","categories":[{"name":"element-ui","slug":"element-ui","permalink":"http://118.25.36.250:8000/categories/element-ui/"}],"tags":[{"name":"element-ui","slug":"element-ui","permalink":"http://118.25.36.250:8000/tags/element-ui/"},{"name":"validation","slug":"validation","permalink":"http://118.25.36.250:8000/tags/validation/"}]},{"title":"coding（相当于国内的github）","slug":"coding-first","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:27:48.000Z","comments":true,"path":"2018/09/10/coding-first/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/coding-first/","excerpt":"","text":"将本地代码使用git提交到coding仓库在命令行中创建git仓库123456789101112// 创建一个README.md文件git init// 在README.md文件中写入echo \"# adminLTE_simple\" &gt;&gt; README.md// 将文件添加到git中git add README.md// 将git中的文件提交git commit -m \"first commit\"// 在第一次提交项目的时候需要确定项目目录，之后就不需要了git remote add origin url// 将提交的文件添加到项目中git push -u origin master","categories":[{"name":"coding","slug":"coding","permalink":"http://118.25.36.250:8000/categories/coding/"}],"tags":[{"name":"git","slug":"git","permalink":"http://118.25.36.250:8000/tags/git/"}]},{"title":"会话cookie和持久cookie","slug":"cookie","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:28:26.000Z","comments":true,"path":"2018/09/10/cookie/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/cookie/","excerpt":"","text":"Cookie是由服务器端生成，发送给User-Agent,浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器 cookie分为两种，一种是会话cookie,一种是持久cookie 这里介绍一下vue-cookie的用法，1234// 会话cookie(关闭浏览器是清除cookie)this.$cookie.set('dateObject', 'A date object');// 持久cookie,date是指定过多久之后清除cookiethis.$cookie.set('dateObject', 'A date object', &#123; expires: date &#125;);","categories":[{"name":"js","slug":"js","permalink":"http://118.25.36.250:8000/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://118.25.36.250:8000/tags/js/"}]},{"title":"git添加ssh密匙","slug":"git-add-key","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:29:50.000Z","comments":true,"path":"2018/09/10/git-add-key/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/git-add-key/","excerpt":"","text":"上传ssh时，服务器验证不过：如果电脑上有ssh key，要将就有的备份并删除（直接删除文件即可），如果没有，输入以下命令：1234567$ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;尤其注意第三行，应该直接回车，而不是输入自定义的文件名。将生成的id_rsa.pub的内容原封不动复制到github的SSH keys上，之后测试命令： $ ssh -T git@github.com选择“yes”，输入用户名和密码，提示成功！","categories":[{"name":"git","slug":"git","permalink":"http://118.25.36.250:8000/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://118.25.36.250:8000/tags/git/"}]},{"title":"git初体验","slug":"git-first","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:29:58.000Z","comments":true,"path":"2018/09/10/git-first/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/git-first/","excerpt":"","text":"初次上传项目，新建README.md文件12345git initgit add README.mdgit commit -m 'first_commit'git remote add origin git@github.com:daijun123/web-learning.gitgit push origin master 提交多个文件：1234// 文件之间使用空格隔开git add 文件1名字 文件2名字 文件3名字 git commit -m \"备注\"git push origin master 提交单个文件123git add 文件名字git commit -m \"备注\"git push origin master 提交文件夹：git add 文件夹名字 git commit -m \"备注\" git remote rm origin 回滚操作：// 查看指定文件的历史版本 git log &lt;filename&gt; // 回滚到指定commitID git checkout &lt;commitID&gt; &lt;filename&gt; 删除文件// 从版本库中删除 git rm test.txt // 提交 git commit -m \"remove test.txt\" 在文章的结束，推荐两个学习git的网站廖雪峰的git教程猴子都能懂的git入门","categories":[{"name":"git","slug":"git","permalink":"http://118.25.36.250:8000/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://118.25.36.250:8000/tags/git/"}]},{"title":"初识Hexo","slug":"hello-world","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:30:10.000Z","comments":true,"path":"2018/09/10/hello-world/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"http://118.25.36.250:8000/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://118.25.36.250:8000/tags/hexo/"}]},{"title":"初识pm2","slug":"node-pm2","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:30:30.000Z","comments":true,"path":"2018/09/10/node-pm2/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/node-pm2/","excerpt":"","text":"PM2是nodejs进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 pm2常用的命令： 1、启动 123pm2 start app.js相当于node app.js 2、停止 1pm2 stop app.js 3、重启 1pm2 restart app.js 4、项目列表 1pm2 list","categories":[{"name":"pm2","slug":"pm2","permalink":"http://118.25.36.250:8000/categories/pm2/"}],"tags":[{"name":"node","slug":"node","permalink":"http://118.25.36.250:8000/tags/node/"},{"name":"pm2","slug":"pm2","permalink":"http://118.25.36.250:8000/tags/pm2/"}]},{"title":"iframe布局","slug":"iframe","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:30:22.000Z","comments":true,"path":"2018/09/10/iframe/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/iframe/","excerpt":"","text":"使用环境 虽然现在阶段出现了很多框架布局，如：ajax异步、VUE等一些新型框架的组件式开发，但是在页面不是特别多的情况下使用iframe布局也是不错的选择。 代码结构1234567view||—main.html|—view1.html|—view2.html|index.html 关键代码1234567// index.html&lt;div class=\"nav\"&gt; &lt;a href=\"./view/view1.html\" target=\"content\"&gt;view1&lt;/a&gt; &lt;a href=\"./view/view2.html\" target=\"content\"&gt;view2&lt;/a&gt;&lt;/div&gt;&lt;iframe name=\"content\" frameborder=\"0\" src=\"./view/main.html\"&gt;&lt;/iframe&gt;","categories":[{"name":"html","slug":"html","permalink":"http://118.25.36.250:8000/categories/html/"}],"tags":[{"name":"html","slug":"html","permalink":"http://118.25.36.250:8000/tags/html/"}]},{"title":"vue-i18n和ElementUI国际化使用","slug":"vue-i18&elementui","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:31:02.000Z","comments":true,"path":"2018/09/10/vue-i18&elementui/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/vue-i18&elementui/","excerpt":"","text":"vue-i18n官方文档：http://kazupon.github.io/vue-i18n/en/started.htmlelement-ui文档: http://element-cn.eleme.io/#/zh-CN/component/i18n资料分享完了，现在开始总结vue-i18n使用方法： 1、先看一下我的项目结构 2、废话不多说，直接上代码： main.js import Vue from &apos;vue&apos; import App from &apos;./App&apos; import router from &apos;./router&apos; import ElementUI from &apos;element-ui&apos; import &apos;element-ui/lib/theme-chalk/index.css&apos; import i18n from &apos;./i18n/i18n&apos;; Vue.use(ElementUI) Vue.config.productionTip = false new Vue({ el: &apos;#app&apos;, router, i18n, components: { App }, template: &apos;&lt;App/&gt;&apos; }) i18n.js import Vue from &apos;vue&apos; import locale from &apos;element-ui/lib/locale&apos;; import VueI18n from &apos;vue-i18n&apos; import messages from &apos;./langs&apos; Vue.use(VueI18n) //从localStorage中拿到用户的语言选择，如果没有，那默认中文。 const i18n = new VueI18n({ locale: localStorage.lang || &apos;cn&apos;, messages, }) locale.i18n((key, value) =&gt; i18n.t(key, value)) //为了实现element插件的多语言切换 export default i18n cn.js import zhLocale from &apos;element-ui/lib/locale/lang/zh-CN&apos; const cn = { message: { &apos;hello&apos;: &apos;你好，世界&apos;, &apos;msg&apos;: &apos;提示&apos;, } } export default cn; en.js import enLocale from &apos;element-ui/lib/locale/lang/en&apos; const en = { message: { &apos;hello&apos;: &apos;hello, world&apos;, &apos;msg&apos;: &apos;point out&apos;, } } export default en; 然后写一个模板测试一下： &lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;switchChinese()&quot;&gt;切换中文&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;switchEnlish()&quot;&gt;切换英文&lt;/el-button&gt; &lt;p&gt;{{$t('message.hello')}}&lt;/p&gt; &lt;p&gt;{{$t('message.msg')}}&lt;/p&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &apos;HelloWorld&apos;, data () { return { msg: &apos;Welcome to Your Vue.js App&apos; } }, methods: { switchChinese(){ this.$i18n.locale = &apos;cn&apos;; }, switchEnlish(){ this.$i18n.locale = &apos;en&apos;; } } } &lt;/script&gt; 好了，到这里就结束了，有时间还是多去看看vue-i18n文档最后声明一下，这篇文章是借鉴下面这位老兄的文章写的：https://segmentfault.com/a/1190000012779120#articleHeader1","categories":[{"name":"element-ui","slug":"element-ui","permalink":"http://118.25.36.250:8000/categories/element-ui/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://118.25.36.250:8000/tags/vue/"},{"name":"element-ui","slug":"element-ui","permalink":"http://118.25.36.250:8000/tags/element-ui/"},{"name":"vue-i18n","slug":"vue-i18n","permalink":"http://118.25.36.250:8000/tags/vue-i18n/"}]},{"title":"PC端滚动条滚动","slug":"scroll-bar","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:30:40.000Z","comments":true,"path":"2018/09/10/scroll-bar/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/scroll-bar/","excerpt":"","text":"JS控制滚动条的位置： window.scrollTo(x,y); 竖向滚动条置顶： window.scrollTo(0,0); 竖向滚动条置底： window.scrollTo(0,document.body.scrollHeight) 缓慢的滚动到底部 $(&apos;html, body&apos;).animate({ scrollTop: $(&apos;html body&apos;).height()}, &apos;slow&apos;);","categories":[{"name":"js","slug":"js","permalink":"http://118.25.36.250:8000/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://118.25.36.250:8000/tags/js/"}]},{"title":"前端编辑器之 vs code","slug":"vscode","date":"2018-09-10T13:41:54.000Z","updated":"2018-09-11T03:30:52.000Z","comments":true,"path":"2018/09/10/vscode/","link":"","permalink":"http://118.25.36.250:8000/2018/09/10/vscode/","excerpt":"","text":"最近工作不是特别忙，就把网上比较火的几个编辑器（WebStorm、SubLime、vscode、Atom）都下载下来用了一下。发现各有各的优点： WebStorm: JetBrains公司旗下的web前端领域的作品，被人誉为“Web前端开发神器”。我用了一下，确实很好用，但是是要收费的，而且不便宜。 SubLime: 是一个文本编辑器，也比较好用，有大量的插件可以安装，用的人也蛮多的。是收费软件，但可以无限期试用。 Atom: 是github专门为程序员推出的一个跨平台文本编辑器。之前bug挺多的，最近好了很多，用的人都挺推荐的。值得一提的是这个编辑器是开源的。 vscode: 微软公司发布的一款免费的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、mac以及linux，运行流畅，可谓是微软良心之作…… vscode比较好用的快捷键： 1、新建文件 Ctrl+N 2、文件之间切换 Ctrl+Tab 3、代码行缩进 Ctrl+[ 、 Ctrl+] 4、上下移动一行： Alt+Up 或 Alt+Down 5、向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down 6、代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code 7、删除行： Shift+Ctrl+K","categories":[{"name":"vs-code","slug":"vs-code","permalink":"http://118.25.36.250:8000/categories/vs-code/"}],"tags":[{"name":"vs-code","slug":"vs-code","permalink":"http://118.25.36.250:8000/tags/vs-code/"}]},{"title":"css3动画-简单例子","slug":"css3-animation","date":"2018-07-15T14:34:28.000Z","updated":"2018-09-11T03:28:38.000Z","comments":true,"path":"2018/07/15/css3-animation/","link":"","permalink":"http://118.25.36.250:8000/2018/07/15/css3-animation/","excerpt":"","text":"123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .trans &#123; width: 500px; height: 500px; border: 1px solid #ccc; animation-name:myfirst; /* 规定@keyframes动画名称 */ animation-duration:3s; /* 规定动画多久完成 */ animation-timing-function:linear; /* 规定动画速度曲线 */ animation-delay: 1s; /* 规定动画何时开始 */ &#125; @keyframes myfirst&#123; from &#123; background-color: #ccc; &#125; to &#123; background-color: red; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;trans&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/categories/css3/"}],"tags":[{"name":"css3","slug":"css3","permalink":"http://118.25.36.250:8000/tags/css3/"}]}]}